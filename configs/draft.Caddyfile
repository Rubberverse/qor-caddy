# TODO: Look into this better, maybe drop this whole configurate via envs boogaloo lol
{
	# General Caddy Global Directives
	debug {$CADDY_DEBUG}
	auto_https {$CADDY_AUTO_HTTPS}
	http_port {$CADDY_HTTP_PORT}
	https_port {$CADDY_HTTPS_PORT}
	admin {$CADDY_ADMIN}
	# Change to your Let's Encrypt email
	email {$CADDY_LETSENCRYPT_EMAIL}
	# Uncomment whatever you will use, without any of these Caddy will just do normal ownership verification
	${DNS_TYPE} ${DNS_SERVICE} {$DNS_API_KEY}
	# acme_dns duckdns {$DUCKDNS_API_KEY}
	# Required
	order coraza_waf first
	log {
		format console
		level {$CADDY_LOG_LEVEL}
	}

	# Crowdsec Bouncer configuration
	# Disabled for Testing deployment
	crowdsec {
		api_url {$CROWDSEC_LAPI_URL}
		api_key {$CROWDSEC_API_KEY}
		ticket_interval {$CROWDSEC_TICKET_INTERVAL}
	}
}

${HOSTNAME}:${PORT} {
	coraza_waf {
		load_owasp_crs
		directives `
		Include @coraza.conf-recommended
		Include @crs-setup.conf.example
		Include @owasp_crs/*.conf
		SecRuleEngine On
		SecDebugLog /dev/stdout
		SecDebugLogLevel 9
		SecRule REQUEST_URI "@streq /admin" "id:101,phase:1,t:lowercase,deny,status:403"
		SecRule REQUEST_BODY "@rx maliciouspayload" "id:102,phase:2,t:lowercase,deny,status:403"
		SecRule RESPONSE_HEADERS::status "@rx 406" "id:103,phase:3,t:lowercase,deny,status:403"
		SecResponseBodyAccess On
		SecResponseBodyMimeType application/json
		SecRule RESPONSE_BODY "@contains responsebodycode" "id:104,phase:4,t:lowercase,deny,status:403"
		`
	}
	response "Caddy is configured"
}
