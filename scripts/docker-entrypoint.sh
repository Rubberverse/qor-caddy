/app/bin/goawk '
    # Functions start
    function fileExists(path) {
        if ((getline < path) > 0) {
            close(file)
            # If it does, return 1
            return 1
        }
        else {
            close(file)
            # If it doesnt, return 0
            return 0
        }
    }
    function showASCII() {
        print " ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà   ‚ñà    ‚ñà‚ñà  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ    ‚ñÑ‚ñÑ‚ñÑ‚ñÑ   ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñí   ‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà "
        print "‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí ‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñì‚ñà   ‚ñÄ ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñë   ‚ñà‚ñí‚ñì‚ñà   ‚ñÄ ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà    ‚ñí ‚ñì‚ñà   ‚ñÄ "
        print "‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí‚ñì‚ñà‚ñà  ‚ñí‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñí ‚ñÑ‚ñà‚ñà‚ñí‚ñà‚ñà‚ñí ‚ñÑ‚ñà‚ñà‚ñí‚ñà‚ñà‚ñà   ‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí ‚ñì‚ñà‚ñà  ‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà   ‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí‚ñë ‚ñì‚ñà‚ñà‚ñÑ   ‚ñí‚ñà‚ñà‚ñà   "
        print "‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñì‚ñà  ‚ñë‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñë‚ñà‚ñÄ  ‚ñí‚ñà‚ñà‚ñë‚ñà‚ñÄ  ‚ñí‚ñì‚ñà  ‚ñÑ ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ    ‚ñí‚ñà‚ñà ‚ñà‚ñë‚ñë‚ñí‚ñì‚ñà  ‚ñÑ ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ    ‚ñí   ‚ñà‚ñà‚ñí‚ñí‚ñì‚ñà  ‚ñÑ "
        print "‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñë‚ñì‚ñà  ‚ñÄ‚ñà‚ñì‚ñë‚ñì‚ñà  ‚ñÄ‚ñà‚ñì‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí   ‚ñí‚ñÄ‚ñà‚ñë  ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí"
        print "‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë‚ñë‚ñí‚ñì‚ñí ‚ñí ‚ñí ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë   ‚ñë ‚ñê‚ñë  ‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë"
        print "  ‚ñë‚ñí ‚ñë ‚ñí‚ñë‚ñë‚ñë‚ñí‚ñë ‚ñë ‚ñë ‚ñí‚ñë‚ñí   ‚ñë ‚ñí‚ñë‚ñí   ‚ñë  ‚ñë ‚ñë  ‚ñë  ‚ñë‚ñí ‚ñë ‚ñí‚ñë   ‚ñë ‚ñë‚ñë   ‚ñë ‚ñë  ‚ñë  ‚ñë‚ñí ‚ñë ‚ñí‚ñë‚ñë ‚ñë‚ñí  ‚ñë ‚ñë ‚ñë ‚ñë  ‚ñë"
        print "  ‚ñë‚ñë   ‚ñë  ‚ñë‚ñë‚ñë ‚ñë ‚ñë  ‚ñë    ‚ñë  ‚ñë    ‚ñë    ‚ñë     ‚ñë‚ñë   ‚ñë      ‚ñë‚ñë     ‚ñë     ‚ñë‚ñë   ‚ñë ‚ñë  ‚ñë  ‚ñë     ‚ñë   "
        print "   ‚ñë        ‚ñë      ‚ñë       ‚ñë         ‚ñë  ‚ñë   ‚ñë           ‚ñë     ‚ñë  ‚ñë   ‚ñë           ‚ñë     ‚ñë  ‚ñë"
        print "                        ‚ñë       ‚ñë                      ‚ñë                                   "
        print "    You are the only person capable of change. Lead your life the way you want it to go.   "
    }
    # Caddy launch function - just a simple if/else block
    function launchCaddy(VAR_ENV, CONFIG_PATH, EXTRA_ARGS) {
        if (VAR_ENV == 1 || VAR_ENV == 0) {
            print "[ ‚ú® Launcher ] Starting Caddy in Production environment"
            system("/app/bin/caddy start --config CONFIG_PATH EXTRA_ARGS")
            system("/app/bin/sleep")
        } else if (VAR_ENV == 2) {
            print "[ ‚ú® Launcher ] Starting Caddy in Testing environment"
            system("/app/bin/caddy start --config CONFIG_PATH --watch EXTRA_ARGS")
            system("/app/bin/sleep")
        } else {
            print "Container init startup error"
            exit(2)
        }
    }
    BEGIN {
        # Checks value of CADDY_ENVIRONMENT and in case its wrong, resets it to ERR
        envValue = tolower(ENVIRON["CADDY_ENVIRONMENT"])
        if (envValue == "prod") {
            ENVIRON["VAR_ENV"] = 1
        } else if (envValue == "test") {
            ENVIRON["VAR_ENV"] = 2
        } else {
            ENVIRON["VAR_ENV"] = "ERR"
        }
        # Check if CADDY_ENVIRONMENT is valid or not (ex. prod or test)
        if (ENVIRON["VAR_ENV"] != "ERR") {
            print "[ ‚ú® Pass ] ‚úÖ CADDY_ENVIRONMENT is valid!]"
        } else {
            print "[ ‚ö†Ô∏è Warning ] Invalid or blank CADDY_ENVIRONMENT!", "[ ‚ö†Ô∏è Warning Desc ] Container will fallback to Production launch"
            ENVIRON["VAR_ENV"] = 1
        }
        # Check if config file is mounted
        fileExistsResult = fileExists(ENVIRON["CONFIG_PATH"])
        if (fileExistsResult) {
            print "[ ‚ú® Pass ] ‚úÖ CONFIG_PATH is valid!"
        } else {
            print "[ ‚ùå Error ] CONFIG_PATH is invalid!", "[ Error Desc ] This container doesnt start with a default configuration file", "Users are expected to mount it themselves inside /app/configs directory"
            exit(1)
        }
        # Show ASCII art and other
        showASCII()
        print "üóíÔ∏è Repository & Guides - https://github.com/rubberverse/qor-caddy"
        print "‚ö†Ô∏è This container has no shell!", "...which means that you wont be able to run commands from it. Its more secure though!"
        print ""
        print "üìÅ Projects used: Bunster, GoAWK, Caddy, Third-party Caddy modules, Go (programming language)"
        print "‚ú® Shoutouts to: Maintainers and community of Bunster, GoAWK, Caddy, Caddy modules and Go!"
        print ""
        # Launch Caddy
        launchCaddy(ENVIRON["VAR_ENV"], ENVIRON["CONFIG_PATH"], ENVIRON["EXTRA_ARGUMENTS"])
    }
'

if [[ "$VAR_ENV" == "1" ]]; then
    /app/bin/caddy run --config "$CONFIG_PATH" "$EXTRA_ARGS"
    /app/bin/sleep
elif [[ "${VAR_ENV}" == "2" ]]; then
    /app/bin/caddy start --config "$CONFIG_PATH" "$EXTRA_ARGS"
    /app/bin/sleep
else
    /app/bin/caddy run --config "$CONFIG_PATH" "$EXTRA_ARGS"
    /app/bin/sleep
fi